name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm install @octokit/rest axios
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          separator: ' '
      
      - name: Run AI Code Review
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          node --input-type=module - <<'EOF'
          import fs from 'fs';
          import path from 'path';
          import { Octokit } from '@octokit/rest';
          import axios from 'axios';

          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          const changedFiles = process.env.CHANGED_FILES?.split(' ') || [];
          const context = JSON.parse(process.env.GITHUB_CONTEXT || '{}');

          const getLanguage = (ext) => ({
            '.js': 'javascript',
            '.ts': 'typescript',
            '.jsx': 'javascript',
            '.tsx': 'typescript',
            '.py': 'python',
            '.java': 'java',
            '.cpp': 'cpp',
            '.c': 'c',
            '.cs': 'csharp',
            '.go': 'go',
            '.rs': 'rust',
            '.php': 'php',
            '.rb': 'ruby'
          }[ext] || 'text');

          async function analyzeCode(filePath, code) {
            const prompt = `
            Review the following ${getLanguage(path.extname(filePath))} code and return JSON:
            {
              "score": 1-10,
              "summary": "short summary",
              "comments": [
                { "line": 5, "type": "bug|performance|style|security", "severity": "low|medium|high", "message": "feedback" }
              ]
            }

            Code:
            \`\`\`
            ${code}
            \`\`\`
            `;

            try {
              const res = await axios.post(
                "https://api.groq.com/openai/v1/chat/completions",
                {
                  model: "llama3-8b-8192",
                  messages: [{ role: "user", content: prompt }],
                  temperature: 0.3
                },
                {
                  headers: {
                    Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
                    "Content-Type": "application/json"
                  }
                }
              );

              const content = res.data.choices[0].message.content || "";
              const match = content.match(/\{[\s\S]*\}/);

              if (match) {
                try {
                  return JSON.parse(match[0]);
                } catch {
                  console.warn("Invalid JSON from AI, using raw text as summary.");
                  return { score: 5, summary: content, comments: [] };
                }
              } else {
                return { score: 5, summary: content, comments: [] };
              }
            } catch (e) {
              console.error("Error analyzing file:", filePath, e.message);
              return { score: 0, summary: "AI analysis failed", comments: [] };
            }
          }

          async function postPRComments(reviews) {
            if (context.event_name !== 'pull_request') {
              console.warn("Not a pull request event, skipping PR comments.");
              return;
            }

            const pullRequest = context.event?.pull_request;
            if (!pullRequest) {
              console.warn("No pull request data found in context, skipping PR comments.");
              return;
            }

            const repoFullName = context.repository?.full_name;
            if (!repoFullName) {
              console.warn("No repository full name found, skipping PR comments.");
              return;
            }

            const [owner, repo] = repoFullName.split('/');
            const prNumber = pullRequest.number;
            const commitSha = pullRequest.head.sha;

            console.log(`Posting comments to PR #${prNumber} in ${owner}/${repo}`);

            try {
              for (const review of reviews) {
                if (!review?.comments || review.comments.length === 0) continue;
                
                for (const comment of review.comments) {
                  try {
                    await octokit.pulls.createReviewComment({
                      owner,
                      repo,
                      pull_number: prNumber,
                      body: `**${comment.type?.toUpperCase() || "NOTE"} (${comment.severity || "info"})**: ${comment.message}`,
                      commit_id: commitSha,
                      path: review.filePath,
                      line: comment.line || 1,
                      side: 'RIGHT'
                    });
                    console.log(`Posted comment for ${review.filePath}:${comment.line || 1}`);
                  } catch (error) {
                    console.error(`Failed to post comment for ${review.filePath}:`, error.message);
                  }
                }
              }
            } catch (error) {
              console.error("Error posting PR comments:", error.message);
            }
          }

          async function postPushIssue(reviews) {
            const repoFullName = context.repository?.full_name;
            if (!repoFullName) {
              console.warn("No repository full name found, skipping issue creation.");
              return;
            }

            const [owner, repo] = repoFullName.split('/');
            const commitSha = context.sha?.substring(0, 7) || "unknown";
            let body = `## ðŸ¤– AI Code Review - Commit \`${commitSha}\`\n\n`;

            for (const r of reviews) {
              if (!r) continue;
              body += `### \`${r.filePath}\`\n**Score:** ${r.score}/10\n**Summary:** ${r.summary}\n\n`;
              if (r.comments && r.comments.length > 0) {
                r.comments.forEach(c => {
                  body += `- (${c.severity}) ${c.type}: ${c.message}\n`;
                });
              }
              body += `\n---\n`;
            }

            try {
              await octokit.issues.create({
                owner,
                repo,
                title: `ðŸ¤– AI Code Review - ${commitSha}`,
                body
              });
              console.log(`Created issue for commit ${commitSha}`);
            } catch (error) {
              console.error("Error creating issue:", error.message);
            }
          }

          (async () => {
            console.log(`Event: ${context.event_name}`);
            console.log(`Changed files: ${changedFiles.join(', ')}`);
            
            let reviews = [];
            for (const filePath of changedFiles) {
              if (!fs.existsSync(filePath)) {
                console.log(`Skipping deleted file: ${filePath}`);
                continue;
              }
              
              console.log(`Analyzing: ${filePath}`);
              const code = fs.readFileSync(filePath, 'utf8');
              const result = await analyzeCode(filePath, code);
              if (result) {
                result.filePath = filePath;
                reviews.push(result);
                console.log(`Analysis complete for ${filePath}: Score ${result.score}/10`);
              }
            }

            if (context.event_name === 'pull_request') {
              console.log("Processing as pull request...");
              await postPRComments(reviews);
            } else {
              console.log("Processing as push event...");
              await postPushIssue(reviews);
            }
          })();
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          GITHUB_CONTEXT: ${{ toJson(github) }}