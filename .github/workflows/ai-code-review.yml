name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop
      - master

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            **/*.js
            **/*.ts
            **/*.jsx
            **/*.tsx
            **/*.py
            **/*.java
            **/*.cpp
            **/*.c
            **/*.cs
            **/*.go
            **/*.rs
            **/*.php
            **/*.rb

      - name: Setup Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          npm init -y
          npm install axios @octokit/rest

      - name: Run AI Review (Groq API)
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          node --input-type=module - <<'EOF'
          import fs from 'fs';
          import path from 'path';
          import { Octokit } from '@octokit/rest';
          import axios from 'axios';

          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          const changedFiles = process.env.CHANGED_FILES?.split(' ') || [];
          const context = JSON.parse(process.env.GITHUB_CONTEXT || '{}');

          // Debug logging
          console.log('Event name:', context.event_name);
          console.log('Has payload:', !!context.payload);
          console.log('Has pull_request:', !!(context.payload && context.payload.pull_request));
          console.log('Repository:', context.repository);

          const getLanguage = (ext) => ({
            '.js': 'javascript',
            '.ts': 'typescript',
            '.jsx': 'javascript',
            '.tsx': 'typescript',
            '.py': 'python',
            '.java': 'java',
            '.cpp': 'cpp',
            '.c': 'c',
            '.cs': 'csharp',
            '.go': 'go',
            '.rs': 'rust',
            '.php': 'php',
            '.rb': 'ruby'
          }[ext] || 'text');

          async function analyzeCode(filePath, code) {
            const prompt = `
            You are acting as a senior software engineer doing a code review. 
            Review the following ${getLanguage(path.extname(filePath))} code and give a detailed JSON response in the following format:

            {
              "score": 1-10,
              "summary": "short but clear summary of overall code quality",
              "comments": [
                { 
                  "line": number | null, 
                  "type": "bug|performance|style|security|suggestion", 
                  "severity": "low|medium|high", 
                  "message": "Detailed feedback written as if mentoring a junior developer. Give reasoning why it's an issue and how to improve it. If suggesting a change, describe it in words or pseudo-code (not actual code blocks)." 
                }
              ]
            }

            Rules:
            - Act like a senior developer: be detailed, constructive, and clear.  
            - Never output actual code in code fences (like \`\`\`).  
            - When suggesting improvements, explain them in descriptive steps or pseudo-code.  
            - Highlight best practices and possible pitfalls.
            - Focus on meaningful issues, not nitpicks.

            Code to review:
            ---
            ${code}
            ---
            `;

            try {
              const res = await axios.post(
                "https://api.groq.com/openai/v1/chat/completions",
                {
                  model: "llama3-8b-8192",
                  messages: [{ role: "user", content: prompt }],
                  temperature: 0.3,
                  max_tokens: 2048
                },
                {
                  headers: {
                    Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
                    "Content-Type": "application/json"
                  },
                  timeout: 30000
                }
              );

              const content = res.data.choices[0].message.content || "";
              const match = content.match(/\{[\s\S]*\}/);

              if (match) {
                try {
                  return JSON.parse(match[0]);
                } catch (err) {
                  console.warn("Invalid JSON from AI, using raw text as summary.");
                  return { score: 5, summary: content, comments: [] };
                }
              } else {
                return { score: 5, summary: content, comments: [] };
              }
            } catch (e) {
              console.error("Error analyzing file:", filePath, e.message);
              return { score: 0, summary: "AI analysis failed", comments: [] };
            }
          }

          async function postPRComments(reviews) {
            // Check if we're in a PR context more thoroughly
            const isPR = context.event_name === 'pull_request' && 
                        context.payload && 
                        context.payload.pull_request;

            if (!isPR) {
              console.warn("No PR context found. Event:", context.event_name);
              console.warn("Payload keys:", Object.keys(context.payload || {}));
              return;
            }

            const [owner, repo] = context.repository.split('/');
            const prNumber = context.payload.pull_request.number;
            const headSha = context.payload.pull_request.head.sha;

            console.log(`Posting comments for PR #${prNumber} in ${owner}/${repo}`);

            for (const review of reviews) {
              if (!review || !review.comments || review.comments.length === 0) continue;
              
              for (const comment of review.comments) {
                try {
                  await octokit.rest.pulls.createReviewComment({
                    owner,
                    repo,
                    pull_number: prNumber,
                    body: `**${comment.type?.toUpperCase() || "NOTE"} (${comment.severity || "info"})**: ${comment.message}`,
                    commit_id: headSha,
                    path: review.filePath,
                    line: comment.line || 1,
                    side: 'RIGHT'
                  });
                  console.log(`Posted comment for ${review.filePath}:${comment.line}`);
                } catch (error) {
                  console.error(`Failed to post comment for ${review.filePath}:`, error.message);
                  
                  // Fallback: post as a general PR comment if line comment fails
                  try {
                    await octokit.rest.issues.createComment({
                      owner,
                      repo,
                      issue_number: prNumber,
                      body: `**${comment.type?.toUpperCase() || "NOTE"}** in \`${review.filePath}\` (line ${comment.line || '?'}): ${comment.message}`
                    });
                    console.log(`Posted fallback comment for ${review.filePath}`);
                  } catch (fallbackError) {
                    console.error(`Failed to post fallback comment:`, fallbackError.message);
                  }
                }
              }
            }
          }

          async function postPushIssue(reviews) {
            if (reviews.length === 0) {
              console.log("No reviews to post as issue");
              return;
            }

            const [owner, repo] = context.repository.split('/');
            const commitSha = context.sha?.substring(0, 7) || "unknown";
            let body = `## ðŸ¤– AI Code Review - Commit \`${commitSha}\`\n\n`;

            for (const r of reviews) {
              if (!r) continue;
              body += `### \`${r.filePath}\`\n**Score:** ${r.score}/10\n**Summary:** ${r.summary}\n\n`;
              
              if (r.comments && r.comments.length > 0) {
                r.comments.forEach(c => {
                  body += `- **${c.type}** (${c.severity}): ${c.message}\n`;
                });
              } else {
                body += `No specific issues found.\n`;
              }
              body += `\n---\n`;
            }

            try {
              await octokit.rest.issues.create({
                owner,
                repo,
                title: `ðŸ¤– AI Code Review - ${commitSha}`,
                body
              });
              console.log(`Created issue for commit ${commitSha}`);
            } catch (error) {
              console.error(`Failed to create issue:`, error.message);
            }
          }

          // Main execution
          (async () => {
            try {
              console.log(`Processing ${changedFiles.length} changed files`);
              
              let reviews = [];
              for (const filePath of changedFiles) {
                if (fs.existsSync(filePath)) {
                  console.log(`Analyzing: ${filePath}`);
                  const code = fs.readFileSync(filePath, 'utf8');
                  
                  // Skip very large files
                  if (code.length > 50000) {
                    console.log(`Skipping ${filePath} - file too large`);
                    continue;
                  }
                  
                  const result = await analyzeCode(filePath, code);
                  if (result) {
                    result.filePath = filePath;
                    reviews.push(result);
                    console.log(`Analysis complete for ${filePath} - Score: ${result.score}/10`);
                  }
                } else {
                  console.warn(`File not found: ${filePath}`);
                }
              }

              console.log(`Completed analysis of ${reviews.length} files`);

              if (context.event_name === 'pull_request') {
                await postPRComments(reviews);
              } else {
                await postPushIssue(reviews);
              }

              console.log('AI code review completed successfully!');
            } catch (error) {
              console.error('AI code review failed:', error);
              process.exit(1);
            }
          })();
          EOF